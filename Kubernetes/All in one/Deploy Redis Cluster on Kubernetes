## Deploy Redis Cluster on Kubernetes

### Question:  
1.) Create Persistent Volumes as mentioned below:

a) Create a first PersistentVolume which should be named redis-pv-01. Configure spec as accessModes which should be ReadWriteOnce, storage capacity should be 1Gi, Type should be hostPath, its hostPath should be /redis01 and directory should be already created on the worker node.

b. Create a second PersistentVolume which should be named redis-pv-02. Configure spec as accessModes which should be ReadWriteOnce, storage capacity should be 1Gi, Type should be hostPath, its hostPath should be /redis02 and directory should already be created on the worker node.

c. Create a third PersistentVolume which should be named redis-pv-03. Configure spec as accessModes which should be ReadWriteOnce, storage capacity should be 1Gi, Type: hostPath, hostPath: /redis03, directory should be already created on the worker node.


d. Creata a fourth PersistentVolume which should be named redis-pv-04. Configure spec as accessModes should be ReadWriteOnce, storage capcity should be 1Gi, Type should be hostPath, its hostPath should be /redis04 and directory should be already created on the worker node.

e. Create a fifth PersistentVolume which should be named as redis-pv-05. Configure spec as accessModes which should be ReadWriteOnce, storage capacity should be 1Gi, Type should be hostPath, its hostPath should be /redis05 and directory should be already created on the worker node.

f. Create a sixth PersistentVolume which should be named redis-pv-06. Configure spec as accessModes which should be ReadWriteOnce, storage capacity should be 1Gi, Type should be hostPath, hostPath should be /redis06 and directory should be already created on the worker node.

2.) We already created ConfigMap named as redis-cluster-configmap. You can try to inspect it.

3.) Create a service which should be named redis-cluster-service. Configure spec as first port name should be client, its port should be 6379 and its targetPort should be 6379. The second port name should be gossip, its port should be 16379 and its targetPort should be 16379, its type should be ClusterIP. And the selector's app should be redis-cluster.


4.) Create a StatefulSet which should be named redis-cluster. Confiugre spec as replicas should be 6, selector's matchLabels app should be redis-cluster. Template's labels app should be redis-cluster under the metadata. The container name should be redis-container, use image redis:5.0.1-alpine ( use exact name of image as mentioned ), use command: ["/conf/update-node.sh", "redis-server", "/conf/redis.conf"], env name should be POD_IP, valueFrom should be fieldRef, fieldPath should be status.podIP (apiVersion: v1). First port name should be client, its containerPort should be 6379, second port name should be gossip, its containerPort should be 16379. First volumeMount name should be conf, its mountPath should be /conf and readOnly should be false ( ConfigMap Mount ), second volumeMount name should be data, its mountPath should be /data, readOnly should be false ( volumeClaim ). Volume name should be conf, its configMap name should be redis-cluster-configmap and its defaultMode should be 0755. volumeClaimTemplates name should be data under metadata, accessModes should be ReadWriteOnce and storage request should be 1Gi.

5.) Configure the Cluster. Once the StatefulSet has been deployed with 6 Running pods, run the following commands and type yes when prompted. Command: kubectl exec -it redis-cluster-0 -- redis-cli --cluster create --cluster-replicas 1 $(kubectl get pods -l app=redis-cluster -o jsonpath='{range.items[*]}{.status.podIP}:6379 {end}').


### Solution:  

1. At first  kubectl  utility configure and working from jump server, run below commands

    `kubectl get namespace`

    `kubectl get pods`

    `kubectl get pv`


2. Create first persistent volumes & then deploy the pods & services



 3. Create yaml  file with all the parameters , you can copy form gitlab

```
cat > pv.yaml <<EOF
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv-01
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /redis01
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv-02
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /redis02
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv-03
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /redis03
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv-04
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /redis04
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv-05
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /redis05
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv-06
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /redis06
EOF
```

```
cat > statefulset.yaml <<EOF
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-service
spec:
  type: NodePort
  selector:
    app: redis-cluster
  ports:
    - name: client
      port: 6379
      targetPort: 6379
    - name: gossip
      port: 16379
      targetPort: 16379
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
spec:
  replicas: 6
  serviceName: redis-cluster
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      volumes:
        - name: conf
          configMap:
            name: "redis-cluster-configmap"
            defaultMode: 0755
      containers:
        - name: redis-container
          image: redis:5.0.1-alpine
          command: ["/conf/update-node.sh", "redis-server", "/conf/redis.conf"]
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: "status.podIP"
          ports:
            - containerPort: 6379
              name: client
            - containerPort: 16379
              name: gossip
          volumeMounts:
            - name: conf
              mountPath: "/conf"
              readOnly: false
            - name: data
              mountPath: "/data"
              readOnly: false
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
EOF
```
`kubectl apply -f pv.yaml`

`kubectl apply -f statefulset.yaml`

4.  Wait for pod running status 

    `kubectl get pods`

5.  Validate the task by executing command given in task  